verbosity=1;
load "msh3"
load "tetgen"
load "medit"
include "MeshSurface.idp"

include "ffmatlib.idp"



real c0 = 299792458;        // speed of light in vacuum
real mue0 = 4.*pi*1e-7;     // Permeability of free space
real eps0 = 1./c0^2/mue0;   // Permittivity of free space
real Z0 = sqrt(mue0/eps0);  // Impedance of free space

real    lambda0 = 10e-6;        // vacuum wavelength (in m)
complex ns    = 10.-0*1i*70.;   // sphere refractive index (complex)
real radiusOfInnerSpher = 1.5 * lambda0;

real lambda = 1.;        // vacuum wavelength (in 10*1e-6 m)
     radiusOfInnerSpher = 1.* lambda;

real k0 = 2.* pi / lambda;
//complex k = k0 * ns;
real w = c0 * 2.* pi / lambda0;


 
// 
meshS ThHex;
real volumetet;  // use in tetg.


//real step = 0.2/radiusOfInnerSpher;
real step = lambda / 10;

volumetet = (step^3)/6.; 

//////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// creating an inner sphere ///////////////////////////////////////
meshS ThInnerSphere; // 
/*{
mesh  Th=square(10,20,[x*pi-pi/2,2*y*pi]);  //  $]\frac{-pi}{2},frac{-pi}{2}[\times]0,2\pi[ $
//  a paratrization of a sphere 
func f1 =cos(x)*cos(y);
func f2 =cos(x)*sin(y);
func f3 = sin(x);
//  de  partiel derivatrive of the parametrization DF
func f1x=sin(x)*cos(y);   
func f1y=-cos(x)*sin(y);
func f2x=-sin(x)*sin(y);
func f2y=cos(x)*cos(y);
func f3x=cos(x);
func f3y=0;
// $  M = DF^t DF $
func m11=f1x^2+f2x^2+f3x^2;
func m21=f1x*f1y+f2x*f2y+f3x*f3y;
func m22=f1y^2+f2y^2+f3y^2;

func perio=[[4,y],[2,y],[1,x],[3,x]];  // to store the periodic condition 

// the intial mesh
savemesh(Th,"sphere",[f1,f2,f3]);

real R=radiusOfInnerSpher,hh=step;// hh = 0.1 -> max , hh=0.5 -> min 
real vv= 1/square(hh);
verbosity=2;
Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,inquire=1,periodic=perio);
//plot(Th,wait=1);
Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
//plot(Th,wait=1);
Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
//plot(Th,wait=1);
Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);

int[int] refIn = [0,11];
ThInnerSphere = movemesh23(Th,transfo=[f1*R,f2*R,f3*R],orientation=1, region=refIn,removeduplicate=false);
}*/




//////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// creating an outer sphere ///////////////////////////////////////
meshS ThOuterSphere; // 
/*{
mesh Th=square(10,20,[x*pi-pi/2,2*y*pi]);  //  $]\frac{-pi}{2},frac{-pi}{2}[\times]0,2\pi[ $
//  a paratrization of a sphere 
func f1 =cos(x)*cos(y);
func f2 =cos(x)*sin(y);
func f3 = sin(x);
//  de  partiel derivatrive of the parametrization DF
func f1x=sin(x)*cos(y);   
func f1y=-cos(x)*sin(y);
func f2x=-sin(x)*sin(y);
func f2y=cos(x)*cos(y);
func f3x=cos(x);
func f3y=0;
// $  M = DF^t DF $
func m11=f1x^2+f2x^2+f3x^2;
func m21=f1x*f1y+f2x*f2y+f3x*f3y;
func m22=f1y^2+f2y^2+f3y^2;

func perio=[[4,y],[2,y],[1,x],[3,x]];  // to store the periodic condition 

// the intial mesh
savemesh(Th,"sphereOuter",[f1,f2,f3]);

real R=10*radiusOfInnerSpher,hh=step;// hh  taille du maille sur la shere unite. 
real vv= 1/square(hh);
verbosity=2;
Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,inquire=1,periodic=perio);
//plot(Th,wait=1);
Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
//plot(Th,wait=1);
Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
//plot(Th,wait=1);
Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);

int[int] refOut = [0,12];
ThOuterSphere = movemesh23(Th,transfo=[f1*R,f2*R,f3*R],orientation=1, region=refOut,removeduplicate=false);
}*/

step = lambda / 2;
//volumetet = (step^3)/6.;
real hs = step;
ThInnerSphere = Sphere(radiusOfInnerSpher,    step,11,1);
ThOuterSphere = Sphere(4.*radiusOfInnerSpher, step,12,1);

/////////////////////////////////////////////////////////////////////////////
//meshS ThS = ThHex + ThInnerSphere; // "gluing" surface meshs to tolat boundary meshes
meshS ThS =  ThOuterSphere + ThInnerSphere;
medit("Bounday mesh",ThS,wait=1);


real voltet=(hs^3)/6.;
real[int] domaine = [0,0,0,1,volumetet,0,0,0.7,2,volumetet];
mesh3 Th = tetg(ThS,switch="pqaAAYYQ",nbofregions=2,regionlist=domaine);
// Tetrahelize the interior of the cube with tetgen
// medit("tetg",Th,wait=1);
savemesh(Th,"Th-hex-sph.mesh");

fespace Ph(Th,P03d);
fespace Vh(Th,P1);
Ph reg=region;

cout << "  centre = " << reg(0,0,0) << endl;
cout << " exterieur = " << reg(0,0,0.7) << endl;
cout << "  voltet = " << voltet << endl;

macro Grad(u) [dx(u),dy(u),dz(u)] // EOM

Vh uh,vh;

real t = 0.;

Vh<complex> Hz, hz;
Vh<complex> Ey1 = exp(- 1i* k0 * x);
Vh <complex> Ez,ez,Ey,ey,Ex,ex;
real n2 = 2.;
Vh <complex> N0= 1. + (n2 - 1.)*(sqrt(x^2.+y^2. + z^2.) < radiusOfInnerSpher);

//Vh <complex> k = k0 * N0;
complex k2 = k0 * n2; // quantity sphere 1->1,2->2

/*
problem GelmhotzEquationForH3D([Ez,Ey,Ex],[ez,ey,ex])=
  - int3d(Th,2)( Grad(Ez)'* Grad(ez))
  - int3d(Th,2)( Grad(Ey)'* Grad(ey))
  - int3d(Th,2)( Grad(Ex)'* Grad(ex))
  + int3d(Th,2) (k0^2 * Ex* ex)
  + int3d(Th,2) (k0^2 * Ey* ey)
  + int3d(Th,2) (k0^2 * Ez* ez)
  - int3d(Th,1)( Grad(Ez)'* Grad(ez))
  - int3d(Th,1)( Grad(Ey)'* Grad(ey))
  - int3d(Th,1)( Grad(Ex)'* Grad(ex))
  + int3d(Th,1) (k2^2 * Ex* ex)
  + int3d(Th,1) (k2^2 * Ey* ey)
  + int3d(Th,1) (k2^2 * Ez* ez)
  + int2d(Th,11)
	(
	   N.x*dx(Ey1)*ey + N.y*dy(Ey1)*ey + N.z*dz(Ey1)*ey
	)
 // + int3d(Th,1) (Ey1 * ey)
 /*  + int2d(Th,0,11)
    (
       N.x*dx(Ez)*ez + N.y*dy(Ez)*ez
	)
	 + int2d(Th,11)
	(
	    - N.z*dx(Ex)*ez - N.z*dy(Ey)*ez
	)
	 + int2d(Th,11)
	(
	    - N.z*dy(Ey1)*ez
	)
    + int2d(Th,11)
    (
       N.z*dz(Ex)*ex + N.y*dy(Ex)*ex
	)
	 + int2d(Th,11)
	(
	    -N.x*dz(Ez)*ex - N.x*dy(Ey)*ex
	)
	+ int2d(Th,11)
	(
	    - N.x*dy(Ey1)*ex
	)
		+ int2d(Th,11)
    (
       N.x*dx(Ey)*ey + N.y*dy(Ey)*ey + N.z*dz(Ey)*ey
	)
	 + int2d(Th,11)
	(
	   N.x*dx(Ey1)*ey + N.y*dy(Ey1)*ey + N.z*dz(Ey1)*ey
	)
	+ int2d(Th,12)
	(
	   -1i*k0* Ez*ez
	)
	+ int2d(Th,12)
	(
	   -1i*k0* Ey*ey
	)
	+ int2d(Th,12)
	(
	   -1i*k0* Ex*ex
	)
//	+ on(11, Ex= 0)
	
  //+ int2d(Th,12)(-1i*k* Hz* hz)
 // + int2d(Th,2,-2)(vh*gn)
 // + int2d(Th,3,-3)(cf*vh*uh)
  ; 
  */
  
  problem GelmhotzEquationForH3D([Ey],[ey])=
  - int3d(Th)( Grad(Ey)'* Grad(ey))
  + int3d(Th) (k0^2 * N0^2 * Ey* ey)
//  - int3d(Th,2)( Grad(Ey)'* Grad(ey))
//  + int3d(Th,1) (k2^2 * Ey* ey)
  + int2d(Th,11)
	(
	   N.x*dx(Ey1)*ey
	)
  + int2d(Th,12)
	(
	   -1i*k0* Ey*ey
	)
  ; 
  
  GelmhotzEquationForH3D;
  
Vh realHz, realEx, realEy,realEy1;
Vh<complex> HzInTime = 0.;
Vh<complex> Ey1InTime = 0.;
Vh<complex> E0=1.;
//HzInTime = Hz* exp(1i * w * t) + exp(1i* w* t - 1i* k * x);
Ey = Ey + 0*(E0 * exp (- 1i * k0 * x ));
Ey1InTime = Ey * exp (1i*(w*t));
//realHz = real(HzInTime);
realEy1 = real(Ey1InTime);

cout << "k0 = " << k0 << endl;
//cout << "k = " << k << endl;

///// save for the matlab
savemesh(Th,"diffractionSInS3d.mesh");
ffSaveVh(Th,Vh,"diffractionSInS3d_vh.txt");
ffSaveData(Ey,"diffractionSInS3d_Ey.txt");
/////////////////////////





real f=1.;
real gn = 1.;
real cf= 1;
/*problem PoissonSphereInSphere(uh,vh)=
     int3d(Th,1)( Grad(uh)'*Grad(vh)*100) 
  +  int3d(Th,2)( Grad(uh)'*Grad(vh)*2) 
  + int3d(Th) (vh*f)
  + on(11, uh = 0.) 
  + on(12, uh = 1.) 
 // + int2d(Th,2,-2)(vh*gn)
 // + int2d(Th,3,-3)(cf*vh*uh)
  ; 
  
  PoissonSphereInSphere;*/
  
// FFCS: with 3D view parameters
real[int] CameraPositionValue = [3.50634,-2.51489,2.60313];
real[int] CameraFocalPointValue = [0.0604689,-0.304636,-0.256484];
real[int] CameraViewUpValue = [0.7198,0.502367,-0.479078];
real[int] CutPlaneOriginValue = [-0.5,-0.55,0.0335184];
real[int] CutPlaneNormalValue = [0,0,1];

	Ey1InTime = Ey + (E0 * exp (1i*(- k0*x)));
	realEy1 = real(Ey1InTime);
plot(realEy1,wait=1,value=1,
	CameraPosition=CameraPositionValue,
	CameraFocalPoint=CameraFocalPointValue,
	CameraViewUp=CameraViewUpValue,
	CutPlaneOrigin=CutPlaneOriginValue,
	CutPlaneNormal = CutPlaneNormalValue);
//medit("   Hz ",Th, uh,wait=1);
//plot(realHz, WindowIndex=1);

real dt = 2.* pi/ w / 20;
for (int i=1; i < 100; i++)
{
    t = dt * i;
    cout<< "Time is" << t << endl;
	
	Ey1InTime = Ey * exp (1i*(w*t)) + (E0 * exp (1i*(w*t - k0*x)));
	realEy1 = real(Ey1InTime);
	
	plot(realEy1,wait=0,value=1,
	CameraPosition=CameraPositionValue,
	CameraFocalPoint=CameraFocalPointValue,
	CameraViewUp=CameraViewUpValue,
	CutPlaneOrigin=CutPlaneOriginValue,
	CutPlaneNormal = CutPlaneNormalValue);
}


