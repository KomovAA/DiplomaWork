verbosity=1;
load "msh3"
load "tetgen"
load "mshmet"
load "medit"
include "MeshSurface.idp"
include "ffmatlib.idp"

load "hpddm"                        // HPDDM plugin
macro partitioner()metis// EOM      // metis, scotch, or parmetis
macro dimension()3// EOM            // 2D or 3D
load "Element_Mixte3d"
include "macro_ddm.idp"
include "cube.idp"
load "medit"

real c0 = 299792458;        // speed of light in vacuum
real mue0 = 4.*pi*1e-7;     // Permeability of free space
real eps0 = 1./c0^2/mue0;   // Permittivity of free space
real Z0 = sqrt(mue0/eps0);  // Impedance of free space

real    lambda0 = 10e-6;        // vacuum wavelength (in m)
complex ns    = 10.-0*1i*70.;   // sphere refractive index (complex)
real radiusOfInnerSpher = 1.5 * lambda0;

real lambda = 1.;        // vacuum wavelength (in 10*1e-6 m)
     radiusOfInnerSpher = 1.* lambda;

real k0 = 2.* pi / lambda;
//complex k = k0 * ns;
real w = c0 * 2.* pi / lambda0;
real step = lambda / 10;
 
// 
meshS ThSphOut;
real volumetet;

step = lambda / 2;
volumetet = (step^3)/6.; 
//volumetet = (step^3)/6.;
real hs = step;
ThSphOut = Sphere(4.*radiusOfInnerSpher,hs,12,1);
meshS Thsph; 
Thsph = Sphere(radiusOfInnerSpher,hs,11,1);


////////////////////////////////
meshS ThS = ThSphOut + Thsph; // "gluing" surface meshs to tolat boundary meshes
//medit("Bounday mesh",ThS,wait=1);

// build a mesh of a axis parallel box with TetGen
real[int] domaine = [0,0,0,33,volumetet,0,0,0.7,55,volumetet];
mesh3 Th = tetg(ThS,switch="pqaAAYYQ",nbofregions=2,regionlist=domaine);    
// Tetrahelize the interior of the cube with tetgen
medit("tetg",Th,wait=1);
savemesh(Th,"Th-hex-sph.mesh");

fespace Ph(Th,P03d);
fespace Vh(Th,P13d);
Ph reg=region;

cout << "  centre = " << reg(0,0,0) << endl;
cout << " exterieur = " << reg(0,0,0.7) << endl;

macro Grad(u) [dx(u),dy(u),dz(u)] // EOM

real t = 0.;

Vh<complex> Hz, hz;
Vh<complex> Ey1 = exp(- 1i* k0 * x);
Vh <complex> Ez,ez,Ey,ey,Ex,ex;
real n2 = 2.;
Vh <complex> N0= 1. + (n2 - 1.)*(sqrt(x^2.+y^2. + z^2.) < radiusOfInnerSpher);

//Vh <complex> k = k0 * N0;
complex k2 = k0 * n2; // quantity sphere 1->1,2->2

/*
problem GelmhotzEquationForH3D([Ey],[ey])=
  - int3d(Th,1)( Grad(Ey)'* Grad(ey))
  + int3d(Th,1) (k0^2 * Ey* ey)
  - int3d(Th,2)( Grad(Ey)'* Grad(ey))
  + int3d(Th,2) (k2^2 * Ey* ey)
  + int2d(Th,7)
	(
	   N.x*dx(Ey1)*ey
	)
  + int2d(Th,8)
	(
	   -1i*k0* Ey*ey
	)
  ; 
  
  GelmhotzEquationForH3D;

Vh realHz, realEx, realEy,realEy1;
Vh<complex> HzInTime = 0.;
Vh<complex> Ey1InTime = 0.;
Vh<complex> E0=1.;
Ey = Ey + (E0 * exp (- 1i * k0 * x )) * (sqrt(x^2.+y^2. + z^2.) >= radiusOfInnerSpher);

cout << "k0 = " << k0 << endl;
//cout << "k = " << k << endl;

///// save for the matlab
savemesh(Th,"diffractionSInS3d.mesh");
ffSaveVh(Th,Vh,"diffractionSInS3d_vh.txt");
ffSaveData(Ey,"diffractionSInS3d_Ey.txt");
/////////////////////////
*/
//realEy = real(Ey);
//plot(realEy,wait=1,fill=1);
  
  
  
  
  
  
  
  
  
  
  

macro def(i)[i, i#y, i#z]// EOM             // vector field definition
macro init(i)[i, i, i]// EOM                // vector field initialization
macro defPart(u)u// EOM                     // partition of unity definition
macro initPart(u)u// EOM                    // partition of unity initialization
macro Curl(ux, uy, uz)[dy(uz)-dz(uy), dz(ux)-dx(uz), dx(uy)-dy(ux)]// EOM
macro CrossN(ux, uy, uz)[uy*N.z-uz*N.y, uz*N.x-ux*N.z, ux*N.y-uy*N.x]// EOM
macro Curlabs(ux, uy, uz)[abs(dy(uz)-dz(uy)), abs(dz(ux)-dx(uz)), abs(dx(uy)-dy(ux))]// EOM
func Pk = Edge03d;
func PkPart = Edge03ds0;

macro Grad3(ux, uy, uz) [dx(ux)+dx(uy)+dx(uz), dy(ux)+dy(uy)+dy(uz), dz(ux)+dz(uy)+dz(uz)] // EOM


problem MaxwellEquationsForH3D([Ex,Ey,Ez],[ex,ey,ez]) =
          int3d(Th)(Grad3(ex,ey,ez)'*Grad3(Ex,Ey,Ez))
        - int3d(Th,33)(k0^2 * [ex,ey,ez]'*[Ex,Ey,Ez])
        - int3d(Th,55)(k2^2*[ex,ey,ez]'*[Ex,Ey,Ez])
          + int2d(Th,11)
		  (
   		     -N.x*dx(Ey1)*ey
		   )
		   + int2d(Th,12)
		   (
		     1i*k0* Ey*ey
		   )
		   //- intN1(Th, 2)(1i*k0*CrossN(ex,ey,ez)'*CrossN(Ex,Ey,Ez));
  ;


/* 
problem MaxwellEquationsForH3D([Ex,Ey,Ez],[ex,ey,ez]) =
          int3d(Th)(Curl(ex,ey,ez)'*Curl(Ex,Ey,Ez))
        - int3d(Th)(k0^2*N0^2 * [ex,ey,ez]'*[Ex,Ey,Ez])
		//+ int3d(Th,2)(Curl(ex,ey,ez)'*Curl(Ex,Ey,Ez))
       // - int3d(Th,2)(k2^2*[ex,ey,ez]'*[Ex,Ey,Ez])
          + int2d(Th,11)
		  (
   		     -N.x*dx(Ey1)*ey
		   )
		   + int2d(Th,12)
		   (
		     1i*k0* Ey*ey
		   )
		   //- intN1(Th, 2)(1i*k0*CrossN(ex,ey,ez)'*CrossN(Ex,Ey,Ez));
  ;*/
  
  
MaxwellEquationsForH3D;
Vh realEy = real(Ey);
plot(realEy,wait=1,fill=1);
  
///// save for the matlab
savemesh(Th,"diffractionSInS3d_Maxwell.mesh");
ffSaveVh(Th,Vh,"diffractionSInS3d_vh_Maxwell.txt");
ffSaveData(Ey,"diffractionSInS3d_Ey_Maxwell.txt");
/////////////////////////
